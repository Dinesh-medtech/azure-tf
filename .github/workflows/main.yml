name: Deploy to AKS

on:
  workflow_call:
    inputs:
      AzureDefaultRegion:
        required: false
        type: string
      ProjectName:
        required: false
        type: string
      AksClusterName:
        required: false
        type: string
      AZURE_RESOURCE_GROUP:
        required: false
        type: string
      
    secrets:
      AzureClientId:
        required: true
      AzureClientSecret:
        required: true
      AzureTenantId:
        required: true
      ACR_Username:
        required: true
      ACR_Password:
        required: true
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step: Log in to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AzureClientId }}
          client-secret: ${{ secrets.AzureClientSecret }}
          tenant-id: ${{ secrets.AzureTenantId }}

      # Step: Log in to Azure Container Registry
      - name: Login to Azure Container Registry
        run: |
          docker login ${{ secrets.ACR_REGISTRY }} --username ${{ secrets.ACR_USERNAME }} --password ${{ secrets.ACR_PASSWORD }}

      # Step: Create ACR repository (if necessary)
      - name: Create ACR repository
        run: |
          if ! az acr repository show --name ${{ secrets.ACR_REGISTRY }} --repository ${{ inputs.ProjectName }}; then
              az acr repository create --name ${{ secrets.ACR_REGISTRY }} --repository ${{ inputs.ProjectName }}
          fi

      # Step: Build, tag, and push Docker image to ACR
      - name: Build, tag, and push Docker image to ACR
        id: build-image
        env:
          ACR_NAME: ${{ secrets.ACR_USERNAME }}
          IMAGE_TAG: ${{ github.sha }}
          REPO_NAME: ${{ secrets.ACR_REGISTRY }}.azurecr.io/${{ inputs.ProjectName }}
        run: |
          docker build -t $REPO_NAME:$IMAGE_TAG .
          docker push $REPO_NAME:$IMAGE_TAG
          echo "image=$REPO_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Step: Set image environment variable
      - name: Set image environment variable
        run: echo "image-uri=${{ steps.build-image.outputs.image }}" >> $GITHUB_ENV

      # Step: Substitute image in deployment.yml
      - name: Substitute image in deployment.yml
        run: |
          cat deployment.yml | envsubst > deployment-subst.yml

      # Step: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0 

      # Step: Init, Plan, and Apply Terraform
      - name: Init, Plan, and Apply Terraform
        run: |
          cd terraform
          terraform init
          terraform plan -var="AksClusterName=${{ inputs.AksClusterName }}" -var="AzureDefaultRegion=${{ inputs.AzureDefaultRegion }}" -var="AZURE_RESOURCE_GROUP=${{ inputs.AZURE_RESOURCE_GROUP }}"
          terraform apply -auto-approve -var="AksClusterName=${{ inputs.AksClusterName }}" -var="AzureDefaultRegion=${{ inputs.AzureDefaultRegion }}" -var="AZURE_RESOURCE_GROUP=${{ inputs.AZURE_RESOURCE_GROUP }}"
          
      # Step: Configure kubectl
      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group ${{ inputs.AZURE_RESOURCE_GROUP }} --name ${{ inputs.AksClusterName }} --overwrite-existing

      # Step: Deploy to AKS
      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment-subst.yml
